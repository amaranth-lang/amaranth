from abc import abstractmethod
from amaranth import *
from amaranth.build import *
from amaranth.lib.cdc import ResetSynchronizer


__all__ = ["GateMatePlatform"]


class GateMatePlatform(TemplatedPlatform):
    """
    Required tools:
        * ``yosys``
        * ``p_r``

    The environment is populated by running the script specified in the environment variable
    ``AMARANTH_ENV_GATEMATE``, if present.    
    """


    toolchain = "GateMate"

    required_tools = [
        "yosys",
        "p_r",
    ]

    file_templates = {
        **TemplatedPlatform.build_script_templates,
        "{{name}}.il": r"""
            # {{autogenerated}}
            {{emit_rtlil()}}
        """,
        "{{name}}.debug.v": r"""
            /* {{autogenerated}} */
            {{emit_debug_verilog()}}
        """,
        "{{name}}.ys": r"""
            # {{autogenerated}}
            {% for file in platform.iter_files(".v") -%}
                read_verilog {{get_override("read_verilog_opts")|options}} {{file}}
            {% endfor %}
            {% for file in platform.iter_files(".sv") -%}
                read_verilog -sv {{get_override("read_verilog_opts")|options}} {{file}}
            {% endfor %}
            {% for file in platform.iter_files(".il") -%}
                read_ilang {{file}}
            {% endfor %}
            read_ilang {{name}}.il
            {{get_override("script_after_read")|default("# (script_after_read placeholder)")}}
            synth_gatemate {{get_override("synth_opts")|options}} -top {{name}} -vlog {{name}}_synth.v
            {{get_override("script_after_synth")|default("# (script_after_synth placeholder)")}}
        """,
        "{{name}}.ccf": r"""
            # {{autogenerated}}
            {% for port_name, pin_name, attrs in platform.iter_port_constraints_bits() -%}
                Net "{{port_name}}" Loc = "{{pin_name}}"
                {%- for constraint, value in attrs.items() -%}
                | {{constraint}}={{value}}
                {%- endfor -%};
        {% endfor %}
        """,
    }

    command_templates = [
        r"""
        {{invoke_tool("yosys")}}
            {{quiet("-q")}}
            {{get_override("yosys_opts")|options}}
            -l {{name}}.rpt
            {{name}}.ys
        """,
        r"""
        {{invoke_tool("p_r")}}
            {{verbose("-v")}}
            -i {{name}}_synth.v
            -o {{name}}
            -ccf {{name}}.ccf
            -cCP > {{name}}.tim
        """,
    ]

    # Common logic

    def add_clock_constraint(self, clock, frequency):
        super().add_clock_constraint(clock, frequency)
        clock.attrs["keep"] = True
